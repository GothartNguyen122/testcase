const TestHelper = require('./utils/test-helper');
const DebugHelper = require('./utils/debug-helper');
const { By } = require('selenium-webdriver');

// Test: T√¨m v√† click n√∫t 'Hi·ªán b·ªô l·ªçc n√¢ng cao' tr√™n trang /job

describe('Debug Search Job Filter Button', function() {
    this.timeout(120000);
    let testHelper;
    let debugHelper;

    before(async function() {
        testHelper = new TestHelper();
        await testHelper.setupDriver();
        debugHelper = new DebugHelper(testHelper.driver);
    });

    after(async function() {
         this.timeout(35000);
        try {
            await new Promise(resolve => setTimeout(resolve, 30000));
            console.log('Closing driver...');
            await testHelper.teardownDriver();
            console.log('Driver closed successfully');
        } catch (error) {
            console.log('Error in after hook:', error.message);
            // ƒê·∫£m b·∫£o driver ƒë∆∞·ª£c ƒë√≥ng ngay c·∫£ khi c√≥ l·ªói
            try {
                await testHelper.teardownDriver();
                console.log('Driver closed after error');
            } catch (closeError) {
                console.log('Error closing driver:', closeError.message);
            }
        }
    });

    it("T√¨m v√† click n√∫t 'Hi·ªán b·ªô l·ªçc n√¢ng cao'", async function() {
        this.timeout(120000);
        await testHelper.driver.get(`${testHelper.baseUrl}/job`);
        await testHelper.driver.sleep(3000);

        // T√¨m t·∫•t c·∫£ button v√† log ra ƒë·ªÉ debug
        await debugHelper.findAllButtons();

        // T√¨m n√∫t theo text
        let filterButton = null;
        const buttons = await testHelper.driver.findElements(By.css('button'));
        for (const btn of buttons) {
            const text = await btn.getText();
            if (text && text.includes('Hi·ªán b·ªô l·ªçc n√¢ng cao')) {
                filterButton = btn;
                break;
            }
        }
        if (!filterButton) {
            throw new Error("Kh√¥ng t√¨m th·∫•y n√∫t 'Hi·ªán b·ªô l·ªçc n√¢ng cao'");
        }
        console.log('‚úÖ ƒê√£ t√¨m th·∫•y n√∫t Hi·ªán b·ªô l·ªçc n√¢ng cao');

        // Ki·ªÉm tra c√≥ th·ªÉ click kh√¥ng
        const isInteractable = await debugHelper.checkElementInteractable(filterButton);
        if (!isInteractable) {
            throw new Error('N√∫t kh√¥ng th·ªÉ t∆∞∆°ng t√°c');
        }

        // Click n√∫t
        await filterButton.click();
        console.log('‚úÖ ƒê√£ click n√∫t Hi·ªán b·ªô l·ªçc n√¢ng cao');
        await testHelper.driver.executeScript("window.scrollTo(0, 300);");
        // await driver.executeScript("window.scrollTo(0, 1000);");
        // await testHelper.driver.sleep(30000);

        // Ch·ª•p screenshot sau khi click
        // await debugHelper.takeScreenshot('after-click-advanced-filter');

        // T√¨m v√† click v√†o select box "Ch·ªçn ƒë·ªãa ƒëi·ªÉm..."
        console.log('\n=== T√åM V√Ä CLICK SELECT BOX ƒê·ªäA ƒêI·ªÇM ===');
        
        try {
            // Th·ª≠ t√¨m theo id="location"
            const locationSelect = await testHelper.driver.findElement(By.id('location'));
            console.log('‚úÖ T√¨m th·∫•y select box theo id="location"');
            
            // Click v√†o select box ƒë·ªÉ m·ªü dropdown
            await locationSelect.click();
            console.log('‚úÖ ƒê√£ click v√†o select box ƒë·ªãa ƒëi·ªÉm');
            // await testHelper.driver.sleep(20000);
            

            // Ch·ª•p screenshot sau khi m·ªü dropdown
            // await debugHelper.takeScreenshot('location-dropdown-opened');
        
            
            // Ch·ªçn item ƒë·∫ßu ti√™n t·ª´ dropdown
            console.log('\n=== CH·ªåN ITEM ƒê·∫¶U TI√äN T·ª™ DROPDOWN ===');
            try {
                // T√¨m t·∫•t c·∫£ c√°c option trong dropdown
                const options = await testHelper.driver.findElements(By.css('.ant-select-dropdown .ant-select-item-option'));
                console.log(`‚úÖ T√¨m th·∫•y ${options.length} options trong dropdown`);
                
                if (options.length > 0) {
                    // L·∫•y text c·ªßa option ƒë·∫ßu ti√™n
                    const firstOptionText = await options[1].getText();
                    console.log(`üìù Option ƒë·∫ßu ti√™n: "${firstOptionText}"`);
                    
                    // Click v√†o option ƒë·∫ßu ti√™n
                    await options[1].click();
                    console.log('‚úÖ ƒê√£ click v√†o option ƒë·∫ßu ti√™n');
                    await testHelper.driver.sleep(10000);
                    
                    // Ch·ª•p screenshot sau khi ch·ªçn
                    // await debugHelper.takeScreenshot('location-selected-first-option');
                    
                    // Ki·ªÉm tra xem ƒë√£ ch·ªçn th√†nh c√¥ng ch∆∞a
                    const selectedValue = await locationSelect.getAttribute('value');
                    console.log(`üìã Gi√° tr·ªã ƒë√£ ch·ªçn: "${selectedValue}"`);
                    
                } else {
                    console.log('‚ùå Kh√¥ng t√¨m th·∫•y options trong dropdown');
                }
                
            } catch (error) {
                console.log('‚ùå L·ªói khi ch·ªçn option:', error.message);
                
                // Th·ª≠ c√°ch kh√°c - t√¨m theo class ant-select-item
                try {
                    const items = await testHelper.driver.findElements(By.css('.ant-select-item'));
                    console.log(`‚úÖ T√¨m th·∫•y ${items.length} items theo class ant-select-item`);
                    
                    if (items.length > 0) {
                        const firstItemText = await items[1].getText();
                        console.log(`üìù Item ƒë·∫ßu ti√™n: "${firstItemText}"`);
                        await items[1].click();
                        console.log('‚úÖ ƒê√£ click v√†o item ƒë·∫ßu ti√™n');
                        await testHelper.driver.sleep(2000);
                        // await debugHelper.takeScreenshot('location-selected-first-item');
                    }
                } catch (error2) {
                    console.log('‚ùå L·ªói khi ch·ªçn item:', error2.message);
                }
            }
            
        } catch (error) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y select box theo id="location"');
            console.log('Error:', error.message);
            
            // Th·ª≠ t√¨m theo placeholder
            try {
                const locationSelects = await testHelper.driver.findElements(By.css('input[placeholder*="Ch·ªçn ƒë·ªãa ƒëi·ªÉm"]'));
                if (locationSelects.length > 0) {
                    console.log(`‚úÖ T√¨m th·∫•y ${locationSelects.length} select box theo placeholder`);
                    await locationSelects[0].click();
                    console.log('‚úÖ ƒê√£ click v√†o select box ƒë·ªãa ƒëi·ªÉm (theo placeholder)');
                    await testHelper.driver.sleep(2000);
                    // await debugHelper.takeScreenshot('location-dropdown-opened-placeholder');
                } else {
                    console.log('‚ùå Kh√¥ng t√¨m th·∫•y select box theo placeholder');
                }
            } catch (error2) {
                console.log('‚ùå Kh√¥ng t√¨m th·∫•y select box theo placeholder');
                console.log('Error:', error2.message);
            }
        }

        // T√¨m v√† click v√†o select box "K·ªπ nƒÉng"
        console.log('\n=== T√åM V√Ä CLICK SELECT BOX K·ª∏ NƒÇNG ===');
        
        try {
            // T√¨m theo id="skills"
            const skillsSelect = await testHelper.driver.findElement(By.id('skills'));
            console.log('‚úÖ T√¨m th·∫•y select box theo id="skills"');
            
            // Click v√†o select box ƒë·ªÉ m·ªü dropdown
            await skillsSelect.click();
            console.log('‚úÖ ƒê√£ click v√†o select box k·ªπ nƒÉng');
            // ƒê·ª£i cho ƒë·∫øn khi class ant-select-open xu·∫•t hi·ªán tr√™n div cha
            let parentDiv = await skillsSelect.findElement(By.xpath('ancestor::div[contains(@class, "ant-select")]'));
            let isOpen = false;
            for (let i = 0; i < 20; i++) { // timeout ~2s
                const className = await parentDiv.getAttribute('class');
                if (className.includes('ant-select-open')) {
                    isOpen = true;
                    break;
                }
                await testHelper.driver.sleep(100);
            }
            if (!isOpen) {
                console.log('‚ùå Dropdown k·ªπ nƒÉng kh√¥ng m·ªü ra (kh√¥ng c√≥ class ant-select-open)');
            } else {
                console.log('‚úÖ Dropdown k·ªπ nƒÉng ƒë√£ m·ªü (ant-select-open)');
                // ƒê·ª£i 2s
                await testHelper.driver.sleep(2000);
                // G·ª≠i chu·ªói "Spring" v√†o input
                await skillsSelect.sendKeys('JavaScript');
                console.log('‚úÖ ƒê√£ g·ª≠i chu·ªói "Spring" v√†o input k·ªπ nƒÉng');
                // Nh·∫•n ph√≠m Enter
                await skillsSelect.sendKeys(require('selenium-webdriver').Key.ENTER);
                console.log('‚úÖ ƒê√£ nh·∫•n ph√≠m Enter');
                // D·ª´ng m√†n h√¨nh 2s
                await testHelper.driver.sleep(2000);

                // === X·ª¨ L√ù FIELD C·∫§P ƒê·ªò ===
                // T√¨m input c√≥ id='level'
                const levelSelect = await testHelper.driver.findElement(By.id('level'));
                console.log('‚úÖ T√¨m th·∫•y select box theo id="level"');
                // Click v√†o select box ƒë·ªÉ m·ªü dropdown
                await levelSelect.click();
                console.log('‚úÖ ƒê√£ click v√†o select box c·∫•p ƒë·ªô');
                // ƒê·ª£i 2s
                await testHelper.driver.sleep(2000);
                // G·ª≠i chu·ªói "Intern" v√†o input
                await levelSelect.sendKeys('Senior');
                console.log('‚úÖ ƒê√£ g·ª≠i chu·ªói "Intern" v√†o input c·∫•p ƒë·ªô');
                // Nh·∫•n ph√≠m Enter
                await levelSelect.sendKeys(require('selenium-webdriver').Key.ENTER);
                console.log('‚úÖ ƒê√£ nh·∫•n ph√≠m Enter ·ªü field c·∫•p ƒë·ªô');
                // D·ª´ng m√†n h√¨nh 10s
                // await testHelper.driver.sleep(3000);

                // === X·ª¨ L√ù SLIDER L∆Ø∆†NG ===
                // T√¨m slider
                const slider = await testHelper.driver.findElement(By.css('.ant-slider'));
                console.log('‚úÖ T√¨m th·∫•y slider l∆∞∆°ng');
                // T√¨m 2 handle
                const handles = await slider.findElements(By.css('.ant-slider-handle'));
                if (handles.length < 2) {
                    console.log('‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªß 2 handle slider');
                } else {
                    // L·∫•y th√¥ng tin v·ªã tr√≠ hi·ªán t·∫°i
                    const leftHandle = handles[0];
                    const rightHandle = handles[1];
                    const leftNow = parseInt(await leftHandle.getAttribute('aria-valuenow'));
                    const rightNow = parseInt(await rightHandle.getAttribute('aria-valuenow'));
                    console.log(`V·ªã tr√≠ hi·ªán t·∫°i: left=${leftNow}, right=${rightNow}`);
                    // T√≠nh to√°n offset (slider 0-100, width ~100%)
                    // L·∫•y k√≠ch th∆∞·ªõc slider
                    const sliderRect = await testHelper.driver.executeScript(el => {
                        const rect = el.getBoundingClientRect();
                        return {left: rect.left, width: rect.width};
                    }, slider);
                    // T√≠nh v·ªã tr√≠ c·∫ßn k√©o
                    const leftTarget = 15;
                    const rightTarget = 45;
                    const leftOffset = ((leftTarget - leftNow) / 100) * sliderRect.width;
                    const rightOffset = ((rightTarget - rightNow) / 100) * sliderRect.width;
                    // K√©o handle tr√°i
                    const actions = testHelper.driver.actions({async: true});
                    await actions.move({origin: leftHandle}).press().move({origin: leftHandle, x: Math.round(leftOffset), y: 0}).release().perform();
                    console.log(`‚úÖ ƒê√£ k√©o handle tr√°i v·ªÅ ${leftTarget}`);
                    await testHelper.driver.sleep(2000);
                    // K√©o handle ph·∫£i
                    await actions.move({origin: rightHandle}).press().move({origin: rightHandle, x: Math.round(rightOffset), y: 0}).release().perform();
                    console.log(`‚úÖ ƒê√£ k√©o handle ph·∫£i v·ªÅ ${rightTarget}`);
                    await testHelper.driver.sleep(2000);
                    // Log l·∫°i gi√° tr·ªã m·ªõi
                    const leftNow2 = parseInt(await leftHandle.getAttribute('aria-valuenow'));
                    const rightNow2 = parseInt(await rightHandle.getAttribute('aria-valuenow'));
                    console.log(`V·ªã tr√≠ sau khi k√©o: left=${leftNow2}, right=${rightNow2}`);
                    // await debugHelper.takeScreenshot('salary-slider-after-drag');
                    await testHelper.driver.sleep(10000);

                    const sliderStep = parseInt(await leftHandle.getAttribute('aria-valuestep') || '1');
                    const sliderMin = parseInt(await leftHandle.getAttribute('aria-valuemin') || '0');
                    const sliderMax = parseInt(await leftHandle.getAttribute('aria-valuemax') || '100');
                    console.log(`Slider step: ${sliderStep}, min: ${sliderMin}, max: ${sliderMax}`);

                    // T√¨m gi√° tr·ªã h·ª£p l·ªá g·∫ßn nh·∫•t
                    const leftValid = Math.round(leftTarget / sliderStep) * sliderStep;
                    const rightValid = Math.round(rightTarget / sliderStep) * sliderStep;
                    console.log(`Gi√° tr·ªã h·ª£p l·ªá g·∫ßn nh·∫•t: left=${leftValid}, right=${rightValid}`);
                }
            }
        } catch (error) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y select box theo id="skills"');
            console.log('Error:', error.message);
            
            // Th·ª≠ t√¨m theo placeholder
            try {
                const skillsSelects = await testHelper.driver.findElements(By.css('input[placeholder*="Ch·ªçn k·ªπ nƒÉng"]'));
                if (skillsSelects.length > 0) {
                    console.log(`‚úÖ T√¨m th·∫•y ${skillsSelects.length} select box theo placeholder k·ªπ nƒÉng`);
                    await skillsSelects[0].click();
                    console.log('‚úÖ ƒê√£ click v√†o select box k·ªπ nƒÉng (theo placeholder)');
                    await testHelper.driver.sleep(2000);
                    // await debugHelper.takeScreenshot('skills-dropdown-opened-placeholder');
                } else {
                    console.log('‚ùå Kh√¥ng t√¨m th·∫•y select box theo placeholder k·ªπ nƒÉng');
                }
            } catch (error2) {
                console.log('‚ùå Kh√¥ng t√¨m th·∫•y select box theo placeholder k·ªπ nƒÉng');
                console.log('Error:', error2.message);
            }
        }

        // === CLICK BUTTON T√åM KI·∫æM ===
        const searchButtons = await testHelper.driver.findElements(By.css('button.ant-btn-primary'));
        let found = false;
        for (const btn of searchButtons) {
            const icon = await btn.findElements(By.css('.anticon-search'));
            if (icon.length > 0) {
                await btn.click();
                console.log('‚úÖ ƒê√£ click v√†o button T√¨m ki·∫øm');
                found = true;
                break;
            }
        }
        if (!found) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y button T√¨m ki·∫øm');
        }
        await testHelper.driver.sleep(3000);
        await testHelper.driver.executeScript('window.scrollBy(0, 600);');
        console.log('‚úÖ ƒê√£ scroll m√†n h√¨nh xu·ªëng 200px');
        await testHelper.driver.sleep(10000); // TƒÉng th·ªùi gian ch·ªù sau khi search ƒë·ªÉ l·∫•y data t·ª´ DB
        // T√¨m v√† log t·∫•t c·∫£ job card
        console.log('\n=== DEBUG T·∫§T C·∫¢ JOB CARD SAU SEARCH ===');
        await debugHelper.findAllJobCards();
        // === KI·ªÇM TRA JOB CARD THEO TI√äU CH√ç T√åM KI·∫æM ===
        // Gi·∫£ s·ª≠ c√°c bi·∫øn sau l√† gi√° tr·ªã b·∫°n ƒë√£ d√πng ƒë·ªÉ search:
        const searchLocation = 'H·ªì Ch√≠ Minh'; // ho·∫∑c l·∫•y t·ª´ bi·∫øn th·ª±c t·∫ø b·∫°n d√πng ƒë·ªÉ search
        const searchSkill = 'JavaScript';
        const searchLevel = 'Senior';
        const minSalary = 15; // tri·ªáu
        const maxSalary = 45; // tri·ªáu

        // L·∫•y l·∫°i t·∫•t c·∫£ job card
        const jobCards = await testHelper.driver.findElements(By.css('.ant-row .ant-col.ant-col-24.ant-col-md-12'));
        let passCount = 0;
        let failCount = 0;
        for (let i = 0; i < jobCards.length; i++) {
            try {
                const card = jobCards[i];
                // Location
                let location = '';
                try {
                    location = await card.findElement(By.css('._job-location_1cimi_189')).getText();
                } catch {}
                // Skills
                let skills = [];
                try {
                    const skillElements = await card.findElements(By.css('span.ant-tag:not(.ant-tag-has-color)'));
                    for (const skillElement of skillElements) {
                        const skillText = await skillElement.getText();
                        if (skillText && skillText.trim() !== '') skills.push(skillText);
                    }
                } catch {}
                // Level
                let level = '';
                try {
                    level = await card.findElement(By.css('span.ant-tag.ant-tag-has-color')).getText();
                    console.log("Level:"+level);
                } catch {}
                // Salary
                let salaryText = '';
                let salaryValue = 0;
                try {
                    salaryText = await card.findElement(By.css('._job-salary_1cimi_189')).getText();
                    // L·∫•y s·ªë ƒë·∫ßu ti√™n trong chu·ªói, v√≠ d·ª• "30 tri·ªáu - 50 tri·ªáu"
                    const match = salaryText.replace(/\./g, '').match(/(\d+)/);
                    if (match) salaryValue = parseInt(match[1]);
                } catch {}
                // So s√°nh
                let pass = true;
                let reasons = [];
                if (searchLocation && !location.includes(searchLocation)) {
                    pass = false;
                    reasons.push(`Location kh√¥ng kh·ªõp (${location} != ${searchLocation})`);
                }
                if (searchSkill && !skills.some(s => s.toLowerCase().includes(searchSkill.toLowerCase()))) {
                    pass = false;
                    reasons.push(`Skills kh√¥ng ch·ª©a keyword (${skills.join(', ')})`);
                }
                if (searchLevel && level.trim().toLowerCase() !== searchLevel.trim().toLowerCase()) {
                    pass = false;
                    reasons.push(`Level kh√¥ng kh·ªõp (${level} != ${searchLevel})`);
                }
                if (salaryValue < minSalary || salaryValue > maxSalary) {
                    pass = false;
                    reasons.push(`Salary (${salaryValue}) kh√¥ng n·∫±m trong kho·∫£ng [${minSalary}, ${maxSalary}]`);
                }
                if (pass) {
                    passCount++;
                    console.log(`‚úÖ PASS: Job card ${i + 1} th·ªèa m√£n t·∫•t c·∫£ ƒëi·ªÅu ki·ªán.`);
                } else {
                    failCount++;
                    console.log(`‚ùå FAIL: Job card ${i + 1} kh√¥ng th·ªèa m√£n: ${reasons.join('; ')}`);
                }
            } catch (err) {
                console.log(`‚ùå L·ªói khi ki·ªÉm tra job card ${i + 1}:`, err.message);
            }
        }
        console.log(`\nT·ªïng s·ªë job card PASS: ${passCount}, FAIL: ${failCount}`);
    });
}); 