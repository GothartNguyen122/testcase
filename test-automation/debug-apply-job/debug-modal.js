#!/usr/bin/env node

const TestHelper = require('../test/utils/test-helper');
const { By, until } = require('selenium-webdriver');

async function debugModal() {
    let testHelper;
    
    try {
        console.log('üîç Debug chi ti·∫øt Modal ·ª©ng tuy·ªÉn...\n');
        
        // Kh·ªüi t·∫°o v√† ƒëƒÉng nh·∫≠p
        console.log('1Ô∏è‚É£ Kh·ªüi t·∫°o v√† ƒëƒÉng nh·∫≠p...');
        testHelper = new TestHelper();
        await testHelper.setupDriver();
        await testHelper.login(process.env.TEST_USER_EMAIL, process.env.TEST_USER_PASSWORD);
        await testHelper.navigateToJobDetail(process.env.TEST_JOB_ID || '1');
        console.log('‚úÖ ƒê√£ s·∫µn s√†ng\n');
        
        // Nh·∫•p n√∫t ·ª©ng tuy·ªÉn
        console.log('2Ô∏è‚É£ Nh·∫•p n√∫t ·ª©ng tuy·ªÉn...');
        await testHelper.clickApplyButton();
        console.log('‚úÖ ƒê√£ nh·∫•p n√∫t ·ª©ng tuy·ªÉn\n');
        
        // Ch·ªù modal xu·∫•t hi·ªán
        console.log('3Ô∏è‚É£ Ch·ªù modal xu·∫•t hi·ªán...');
        await testHelper.driver.wait(until.elementLocated(By.css('.ant-modal')), 10000);
        console.log('‚úÖ Modal ƒë√£ xu·∫•t hi·ªán\n');
        
        // Ch·ªù th√™m 2 gi√¢y ƒë·ªÉ modal load ho√†n to√†n
        console.log('4Ô∏è‚É£ Ch·ªù modal load ho√†n to√†n...');
        await new Promise(resolve => setTimeout(resolve, 2000));
        console.log('‚úÖ ƒê√£ ch·ªù 2 gi√¢y\n');
        
        // Ki·ªÉm tra c√°c element trong modal
        console.log('5Ô∏è‚É£ Ki·ªÉm tra c√°c element trong modal...\n');
        
        // Ki·ªÉm tra modal container
        try {
            const modal = await testHelper.driver.findElement(By.css('.ant-modal'));
            console.log('‚úÖ T√¨m th·∫•y .ant-modal');
        } catch (error) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y .ant-modal');
        }
        
        // Ki·ªÉm tra modal header
        try {
            const modalHeader = await testHelper.driver.findElement(By.css('.ant-modal-header'));
            console.log('‚úÖ T√¨m th·∫•y .ant-modal-header');
        } catch (error) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y .ant-modal-header');
        }
        
        // Ki·ªÉm tra modal title v·ªõi nhi·ªÅu selector kh√°c nhau
        console.log('\n6Ô∏è‚É£ Ki·ªÉm tra modal title...');
        
        const titleSelectors = [
            '.ant-modal-title',
            '.ant-modal-header .ant-modal-title',
            'h4',
            '.modal-title',
            '[data-testid="modal-title"]',
            '.ant-modal-header h4',
            '.ant-modal-header .title'
        ];
        
        for (const selector of titleSelectors) {
            try {
                const titleElement = await testHelper.driver.findElement(By.css(selector));
                const titleText = await titleElement.getText();
                console.log(`üìç ${selector}: "${titleText}"`);
            } catch (error) {
                console.log(`‚ùå ${selector}: Kh√¥ng t√¨m th·∫•y`);
            }
        }
        
        // Ki·ªÉm tra t·∫•t c·∫£ text trong modal header
        console.log('\n7Ô∏è‚É£ Ki·ªÉm tra t·∫•t c·∫£ text trong modal header...');
        try {
            const modalHeader = await testHelper.driver.findElement(By.css('.ant-modal-header'));
            const headerText = await modalHeader.getText();
            console.log(`üìç Text trong header: "${headerText}"`);
        } catch (error) {
            console.log('‚ùå Kh√¥ng th·ªÉ l·∫•y text trong header');
        }
        
        // Ki·ªÉm tra t·∫•t c·∫£ h1, h2, h3, h4 trong modal
        console.log('\n8Ô∏è‚É£ Ki·ªÉm tra t·∫•t c·∫£ heading trong modal...');
        const headings = ['h1', 'h2', 'h3', 'h4'];
        for (const heading of headings) {
            try {
                const elements = await testHelper.driver.findElements(By.css(heading));
                for (let i = 0; i < elements.length; i++) {
                    const text = await elements[i].getText();
                    console.log(`üìç ${heading}[${i}]: "${text}"`);
                }
            } catch (error) {
                console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ${heading}`);
            }
        }
        
        // Ki·ªÉm tra t·∫•t c·∫£ text c√≥ ch·ª©a "·ª®ng" ho·∫∑c "Tuy·ªÉn"
        console.log('\n9Ô∏è‚É£ Ki·ªÉm tra text ch·ª©a "·ª®ng" ho·∫∑c "Tuy·ªÉn"...');
        try {
            const allElements = await testHelper.driver.findElements(By.xpath("//*[contains(text(), '·ª®ng') or contains(text(), 'Tuy·ªÉn')]"));
            for (let i = 0; i < allElements.length; i++) {
                const text = await allElements[i].getText();
                const tagName = await allElements[i].getTagName();
                console.log(`üìç ${tagName}[${i}]: "${text}"`);
            }
        } catch (error) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y text ch·ª©a "·ª®ng" ho·∫∑c "Tuy·ªÉn"');
        }
        
        // Ch·ª•p ·∫£nh modal
        console.log('\nüîü Ch·ª•p ·∫£nh modal...');
        await testHelper.takeScreenshot('debug-modal');
        console.log('‚úÖ ƒê√£ ch·ª•p ·∫£nh: debug-modal.png');
        
        // L·∫•y HTML c·ªßa modal
        console.log('\n1Ô∏è‚É£1Ô∏è‚É£ L·∫•y HTML c·ªßa modal...');
        try {
            const modal = await testHelper.driver.findElement(By.css('.ant-modal'));
            const modalHTML = await testHelper.driver.executeScript("return arguments[0].outerHTML;", modal);
            console.log('üìç HTML c·ªßa modal:');
            console.log(modalHTML.substring(0, 500) + '...'); // Ch·ªâ hi·ªÉn th·ªã 500 k√Ω t·ª± ƒë·∫ßu
        } catch (error) {
            console.log('‚ùå Kh√¥ng th·ªÉ l·∫•y HTML c·ªßa modal');
        }
        
    } catch (error) {
        console.log('‚ùå L·ªñI:', error.message);
        console.log('üîç Stack trace:', error.stack);
        
        if (testHelper && testHelper.driver) {
            try {
                await testHelper.takeScreenshot('debug-modal-error');
                console.log('üì∏ ƒê√£ ch·ª•p ·∫£nh l·ªói: debug-modal-error.png');
            } catch (screenshotError) {
                console.log('‚ùå Kh√¥ng th·ªÉ ch·ª•p ·∫£nh l·ªói:', screenshotError.message);
            }
        }
    } finally {
        if (testHelper && testHelper.driver) {
            console.log('\nüßπ D·ªçn d·∫πp...');
            await testHelper.teardownDriver();
            console.log('‚úÖ ƒê√£ ƒë√≥ng driver');
        }
    }
}

// Ch·∫°y debug
debugModal().catch(console.error); 